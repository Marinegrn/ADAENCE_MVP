const prisma = require('../prisma/client');

// üîç R√©cup√©rer toutes les r√©servations
exports.getAllBookings = async (req, res) => {
  try {
    const bookings = await prisma.booking.findMany({
      include: {
        visitor: true,
        senior: true,
        slot: true,
      },
    });
    res.json(bookings);
  } catch (err) {
    res.status(500).json({
      error: 'Erreur r√©cup√©ration r√©servations',
      details: err.message,
    });
  }
};

// ‚ûï Cr√©er une r√©servation
exports.createBooking = async (req, res) => {
  try {
    const {
      visitorEmail,
      volunteerName,
      volunteerPhone,
      message,
      slotId,
      profileId, // seniorId
    } = req.body;

    console.log('üì° Donn√©es re√ßues du front:', req.body);

    // ‚ö†Ô∏è Validation des champs requis
    if (!visitorEmail || !slotId || !profileId) {
      return res.status(400).json({ error: 'Champs requis manquants' });
    }

    // üîç V√©rifier si le cr√©neau est d√©j√† r√©serv√©
    const existingBooking = await prisma.booking.findUnique({
      where: { slotId },
    });

    if (existingBooking) {
      return res.status(400).json({ error: 'Ce cr√©neau est d√©j√† r√©serv√©.' });
    }

    // üë§ V√©rifier ou cr√©er l'utilisateur visiteur
    let visitor = await prisma.user.findUnique({
      where: { email: visitorEmail },
    });

    if (!visitor) {
      visitor = await prisma.user.create({
        data: {
          email: visitorEmail,
          firstName: volunteerName,
          lastName: '',
          phone: volunteerPhone || null,
          role: 'VISITOR',
          password: '', // √† adapter si auth sociale
        },
      });
    }

    // üìÖ Cr√©er la r√©servation
    const booking = await prisma.booking.create({
      data: {
        visitorId: visitor.id,
        seniorId: profileId,
        slotId,
        message,
        status: 'PENDING',
      },
    });

    // ‚úÖ Mettre √† jour le cr√©neau comme r√©serv√©
    await prisma.availableSlot.update({
      where: { id: slotId },
      data: { isBooked: true },
    });

    res.status(201).json(booking);
  } catch (err) {
    // üéØ Erreur Prisma : doublon sur le slotId
    if (err.code === 'P2002' && err.meta?.target?.includes('slotId')) {
      return res.status(400).json({ error: 'Ce cr√©neau est d√©j√† r√©serv√©.' });
    }

    console.error('‚ùå Erreur cr√©ation r√©servation:', err);
    res.status(500).json({
      error: 'Erreur cr√©ation r√©servation',
      details: err.message,
    });
  }
};

// ‚úèÔ∏è Modifier une r√©servation
exports.updateBooking = async (req, res) => {
  try {
    const { id } = req.params;
    const updatedBooking = await prisma.booking.update({
      where: { id },
      data: req.body,
    });
    res.json(updatedBooking);
  } catch (err) {
    res.status(500).json({
      error: 'Erreur modification r√©servation',
      details: err.message,
    });
  }
};

// ‚ùå Supprimer une r√©servation
exports.deleteBooking = async (req, res) => {
  try {
    const { id } = req.params;

    // On r√©cup√®re la r√©servation pour lib√©rer le cr√©neau
    const booking = await prisma.booking.findUnique({
      where: { id },
    });

    if (!booking) {
      return res.status(404).json({ error: 'R√©servation non trouv√©e' });
    }

    // Lib√©rer le cr√©neau
    await prisma.availableSlot.update({
      where: { id: booking.slotId },
      data: { isBooked: false },
    });

    // Supprimer la r√©servation
    await prisma.booking.delete({ where: { id } });

    res.status(204).send();
  } catch (err) {
    res.status(500).json({
      error: 'Erreur suppression r√©servation',
      details: err.message,
    });
  }
};


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(VISITOR)
  
  // Relations
  seniorProfile SeniorProfile?
  volunteer     Volunteer? 
  
  // Réservations faites
  bookings Booking[]
  
  @@map("users")
}

model Volunteer {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  age            Int?
  bio            String?
  location       String?
  availability   String?
  competences    String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("volunteers")
}


model SeniorProfile {
  id          String     @id @default(cuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  age         Int
  bio         String
  location    String
  photo       String?

  // Relations Many-to-Many avec Activity
activities  Activity[] @relation("SeniorActivities")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  availableSlots AvailableSlot[]
  bookings       Booking[]
  
  @@map("senior_profiles")
}

model Activity {
  id          String          @id @default(cuid())
  name        String
  description String
  icon        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt 

  // Relation inverse Many-to-Many
  seniors     SeniorProfile[] @relation("SeniorActivities")

  @@map("activities")
}

model AvailableSlot {
  id        String   @id @default(cuid())
  seniorId  String
  senior    SeniorProfile @relation(fields: [seniorId], references: [id], onDelete: Cascade)
  
  date      DateTime
  startTime String
  endTime   String
  activity  String
  isBooked  Boolean  @default(false)
  
  createdAt DateTime @default(now())
  
  // Réservation associée
  booking   Booking?
  
  @@map("available_slots")
}

model Booking {
  id        String   @id @default(cuid())
  
  visitorId String
  visitor   User     @relation(fields: [visitorId], references: [id])
  
  seniorId  String
  senior    SeniorProfile @relation(fields: [seniorId], references: [id])
  
  slotId    String   @unique
  slot      AvailableSlot @relation(fields: [slotId], references: [id])
  
  message   String?
  status    BookingStatus @default(PENDING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("bookings")
}

model VolunteerApplication {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  age       Int?
  location  String
  motivation String
  availability String
  experience String?
  
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime @default(now())
  
  @@map("volunteer_applications")
}

enum Role {
  VISITOR
  SENIOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}